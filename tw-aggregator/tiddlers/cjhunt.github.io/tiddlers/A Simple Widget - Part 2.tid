created: 20131208211112095
modified: 20131218233502507
title: A Simple Widget - Part 2
type: text/vnd.tiddlywiki
source-wiki: http://cjhunt.github.io/#A%20Simple%20Widget%20-%20Part%202

!Core Data Structures
To understand widgets we need some understanding of four core data structures: i) the Parse Tree ii) the Widget Tree; iii) the Dom Node Tree; and iv) the Dom itself. The choreography of the work needed on these four data structures may not intuitive, so I'll give my understanding at the level needed to get started:

!!The Parse Tree
:The Parse Tree is generated by ~TiddlyWiki5 core parsers as an overall interpretation of all the tiddlers which need to be presented in the browser. One of the first things which happens when a tiddler is to be presented is that it is parsed by the specific parser for the indicated tiddler "type". Parsing a tiddler results in a parse tree for that tiddler which is injected into the overall Parse Tree. When an instance of our widget is initialized, the Parse Tree location of "this" instance of our widget is passed to our widget via "parseTreeNode". Our widget needs to maintain that location via `this.parseTreeNode` so that we can reference it later, and repeatedly, to do things like reading widget attributes when we render our widget. 

!!The Widget Tree
:The Widget Tree is generated during rendering and is instantiated by a combination of our `initialize()` and `render()` functions; it establishes hierarchic relationships between the widgets rendered in the wiki. In a sense,  the Widget Tree overlays the Parse Tree, providing a widget-only view with links back to the Parse Tree. We need to know about it because the Widget Tree does at least two very important things for us:

#It manages the refresh process, so that changes to tiddlers or attributes ripple through the branches of the tree efficiently. In the case of our `<$select...>` widget example we use this mechanism to refresh the widget itself if any of the widget attributes are changed, otherwise we pass the refresh request down through the hierarchy.
#It allows us to create "widget variables" which are visible anywhere in the branches from the widget which "sets" such variables. In the case of the `<$select....>` widget example we use this mechanism to "pass" the selection result to child widgets and macros, so that the selection can inform the wiktext contained by the `<$select....>` widget.

:Two properties of the widget function codify the Widget Tree: `this.parentWidget` and `this.children`. Generally the core Widget function manages these for us.

!!The Dom Node Tree
:The Dom Node Tree is generated by our widget ( `domNodes`  in  `Widget()` ); it establishes hierarchic relationships between the Widget Tree and the any Dom nodes which we want the widget mechanism to manage. Typically a widget needs to add a single, root Dom node which we create in our `render` function, but in principle a widget can include several Dom nodes without a common root.  We care because the Dom tree is used to manage deletion of the Dom nodes which we create within a widget. To make that mechanism work, the root Dom node created by our widget needs to be bolted into the Dom node tree. We also need to make certain that the default `Widget.prototype.removeChildDomNodes` deletes the Dom nodes which our widget creates, or, if it doesn't then write a replacement function which does.

!!The Dom
:The Dom is the Dom. We need to know about it, understand it, "program" it, because it is the mechanism by which we do the job of rendering. Widgets "do" their rendering via a `render` function, which is where we perform standard Dom manipulations to render the html which we desire from our widget. 

The next part of the guide gives a high level breakdown of the widget code.

[[A Simple Widget - Part 3 - Code Breakdown|A Simple Widget - Part 3]]

