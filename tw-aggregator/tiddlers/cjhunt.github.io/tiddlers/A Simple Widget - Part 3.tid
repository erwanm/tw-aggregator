created: 20131208210850939
modified: 20131218233651404
title: A Simple Widget - Part 3
type: text/vnd.tiddlywiki
source-wiki: http://cjhunt.github.io/#A%20Simple%20Widget%20-%20Part%203

!Code Breakdown
The javascript for the `<$select....>` widget is available, here:

:[[$:/editions/codingForTiddlyWiki5/widgets/selectWidget]]. 

If you look through the code you will see that it is largely a copy-paste of almost any one of the standard widgets. There are seven functions in all; the first five functions represent a pattern common to most widgets; the last two functions are helper functions specific to our widget:

Core Widget Functions:

```
SelectWidget.prototype.render
SelectWidget.prototype.execute
SelectWidget.prototype.refresh
SelectWidget.prototype.removeChildDomNodes
SelectWidget.prototype.create
```
Helper Functions:

```
SelectWidget.prototype.getOptionList
SelectWidget.prototype.handleChangeEvent
```
!!Render
Given that the purpose of a widget is to render, the heart of a widget is the `render` function. Typically, we don't need to do any customization of the render function, but we need to understand what it does. The reason that we don't typically need to do much in `render` is that most of the work is typically done by two major functions invoked by `render`, namely `execute` and `create`, and we do most of our customization in those functions.

The main steps of "render" are as follows:

#Maintain a link to the parent DOM node, i.e. the DOM element immediately above any DOM elements which we create with this widget.
#Fetch any attributes which were included in the "call" to this widget.
#Perform calculations needed ahead of construction of the DOM elements for this widget, including making any "child" widgets required by this widget.
#Create the actual DOM elements for this widget.
#Insert the DOM elements for this widget into the parent DOM node structure.
#Use renderChildren to `render` each of the child widgets. These child widgets are rendered as DOM child elements of the DOM node we created earlier with `create`. These child widgets were either created by the earlier `execute` function or could be widgets wrapped by this widget in the wikiText.

```
SelectWidget.prototype.render = function(parent,nextSibling) {
	this.parentDomNode = parent;
	this.computeAttributes();
	this.execute();
	var domNode = this.create(parent,nextSibling);
	this.domNodes.push(domNode);
	parent.insertBefore(domNode,nextSibling);
	this.renderChildren(domNode,null);
};
```
!!Execute
The `execute` function is invoked by the `render` function, and it typically does two things for us:

#Fetches attributes which were included in the widget's invocation, whether wikiText or otherwise. 
#Makes child widgets

Child widgets can come from the originating wikitext, or be created programmatically as part of the the `execute` function.

```
SelectWidget.prototype.execute = function() {
        // get attributes
	this.filter = this.getAttribute("filter");
	this.list = this.getAttribute("list");
	this.tiddler = 
            this.getAttribute("tiddler",this.getVariable("currentTiddler"));
	this.selectClass = this.getAttribute("class");
	this.setName = this.getAttribute("name","currentTiddler");
        // make child widgets
	this.makeChildWidgets();
};
```
In this case we don't create any child widgets as part of this widget, but we do need to make sure that we make any child widgets which originate in the wikitext. For a good example of creating child widgets programmatically I recommend taking a look at the 'execute' function of the `<$edit....>` widget, here:

:[[$:/core/modules/widgets/edit.js]]

!!Create
The `create` function is invoked by the `render` function. It's job is to create the actual DOM nodes forming the rendering of the widget. It is really that simple.

There are a couple of ~TiddlyWiki5 core functions used in the example which are worth noting for future use:

!!!$tw.utils.domMaker
This utility function is provided in the core to help to create DOM nodes with a "class" attached. You have a choice of doing this in one line with `domMaker`:

```
var domNode = $tw.utils.domMaker("div",{class:this.selectClass});
```
Or you can do the same with two lines using plain old DOM manipulation, which would look like this:

```
var domNode = this.document.createElement("div");
domNode.className = this.selectClass;
```
!!!$tw.utils.addEventListeners
This utility function registers event handler functions to DOM objects. In the `<$select....>` widget we add an event handler to the Dom `<select>` entity for "change" events occurring on the widget. Of course we need to provide the event handler function too, and in this case we provide `Select.prototype.handleChangeEvent(event)`.

```
$tw.utils.addEventListeners(select,[
    {name: "change", handlerObject: this, handlerMethod: "handleChangeEvent"}
]);
```

!!!Widget.prototype.setVariable and Widget.prototype.getVariable
`this.setVariable` and `this.getVariable` are the function invocations used to set and get widget variables accessible downstream by child widgets and macros. By "setting" a variable with `setVariable`, any child widget can access that variable directly via getVariable. The widget mechanism does the work of searching back up the widget tree for the nearest, corresponding, `setVariable`.

!!Refresh
The `refresh` function is invoked either externally, typically by the widget's parent widget by invoking `refreshChildren`. For the `<$select....>` widget we do a refresh if and only if the driving attributes have changed. In that case we invoke the standard widget `refreshSelf` function, which removes child DOM nodes of this widget and then re-renders the widget, this time according to the new attributes.

If none of the attributes has changed then all we do here is invoke `refreshChildren` in case any of the child widgets need or want to do a refresh based on changed tiddlers or changed attributes etc.

!!~RemoveChildDomNodes
The `removeChildDomNodes` function is invoked by `refreshSelf` to remove the DOM nodes which we added to the `domNodes` array which we built during `render`. Typically all of the DOM nodes created by a widget are children of a single root DOM node, so that `removeChildDomNodes` is a boiler-plate copy of the corresponding, default `Widget` function.
