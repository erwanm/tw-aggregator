created: 20140103033024329
modified: 20140104013736741
title: A More Complex Widget
type: text/vnd.tiddlywiki
source-wiki: http://cjhunt.github.io/#A%20More%20Complex%20Widget

[[A Simple Widget]] looked at the code for a widget which rendered a simple <select... html construct, passing the user's selection to any enclosed wikitext via widget variables. The simplicity of the widget in question meant that we could easily render the dom nodes for the widget using standard javascript dom manipulation functions. To make things more interesting we need a slightly more complex example.

Early adopters of ~TiddlyWiki5 may recall ~GridWidget. At the time of writing, ~GridWidget is missing from the latest ~TiddlyWiki5 Beta core widgets using the "new" widget mechanism, but it is fully documented at www.tiddlywiki.com (search on GridWidget). Rewriting ~GridWidget for the "new" widget mechanism seems like a worthy exercise if only because it requires manipulation of the widget tree, using Widget's renderChildren function to manage dom node creation, rather than using plain old dom manipulation functions.

For reference, the finished ~GridWidget can be found here:

:[[$:/editions/codingForTiddlyWiki5/widgets/gridWidget.js]]

As usual you can drag and drop the referenced tiddler to your own wikis for general use.

The ~GridWidget code adheres to the "standard" pattern of [[Widget.js|$:/core/modules/widgets/widget.js]]
with customization of the create(), execute() and refresh() functions.

!!~GridWidget.prototype.execute
"~GridWidget.prototype.execute" is where we do all the work of constructing a parse tree defining the widgets needed to build the grid. The limbs and branches of the tree are "element" widgets; the leaves of the tree are "transclude" widgets which transclude the contents from each of the grid's cell tiddlers. 

We concatenate the parseTreeNodes for the wikitext enclosed by our widget ( this.parseTreeNode.children ). This is not entirely necessary and I'll probably remove it, but is perhaps a useful code example, and it does provide a convenient mechanism e.g. to add a caption to the grid.

Finally, makeChildWidgets runs through our parse tree of widgets constructing actual widget objects all the way down the tree.

!!~GridWidget.prototype.create
"~GridWidget.prototype.create" is almost trivial by design; it creates a single div html element as a container for our grid dom elements. It's not essential that we do this ( we could always just put the table html element directly into the dom structure ) but by creating this div we have a container for both the table plus anything which we render from the wikitext enclosed by ~GridWidget, and we use that container to assign a class to its contents. 

We could make "~GridWidget.prototype.create" completely trivial by not creating any html elements, in which case we would need to render our child widgets into parseTreeNode, instead of into our domNode (div). 

!!~GridWidget.prototype.refresh
"~GridWidget.prototype.refresh" is essentially vanilla Widget.js, but it is worthy of note because I floundered here while coding. I expected to need to write special code to refresh the transclude widgets at the leaves of our widget tree i.e. if the grid cell content tiddlers changed. By making certain that the transclude widgets are tied into the rest of the widget tree, we ensure that these widgets are part of the refresh process, and thereby any change to referenced tiddlers causes the transclude widgets to be refreshed, independent of a refresh of the table itself. There is no code needed for this, and the refresh process is optimized by the fact that we don't need to waste time refreshing the entire ~GridWidget - all part of the magic of ~TiddlyWiki5.

