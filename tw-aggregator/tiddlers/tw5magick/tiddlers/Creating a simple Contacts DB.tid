created: 20140113103313426
creator: Stephan Hradek
description: Showing how to create a simple Contacts Database using the newtiddler widget.
modified: 20140214135120319
modifier: Stephan Hradek
title: Creating a simple Contacts DB
tags: toc
source-wiki: http://tw5magick.tiddlyspot.com/#Creating%20a%20simple%20Contacts%20DB

To showcase what's possible with my [[newtiddler widget|$:/plugins/skeeve/newtiddler.js]] (search for "~NewtiddlerWidget" on my [[tiddlystuff wiki|http://tiddlystuff.tiddlyspot.com]]), I created a [[small Contacts DB|Person DB]].

A contact in this case is a tiddler having the tag {{person||showtag}} and containing some contact detail fields. The contact's name is the tiddler's name.

First we need to create a [[skeleton|personSkeleton]] for a ''person'' tiddler. This is how I sat it up:

|!title |"[[personSkeleton]]" |
|!tags |"$(tags)$" |
|!fields |"phone", "street", "town" |

Please note that this skeleton does not have the {{person||showtag}} tag yet, but a placeholder. This has the advantage

# that the skeleton does not need to be filtered when using the list widget
# that the skeleton can also be used with other tags

The disadvantage at the moment is that the tags placeholder can not be properly viewed as long as the placeholder is not replaced.

Now that we have a skeleton for the data, we can create a view template for it. I choose to simply add the contact details to the bottom of the standard TiddlyWiki viewtemplate. This way a contact's text field can be used for taking notes about the contact.

The view template is just a normal tiddler named [[viewPerson]]. It gets automatically transcluded when we give it the tag {{$:/tags/ViewTemplate||showtag}}. This is the content of the viewPerson tiddler:

{{viewPerson||code}}

The list widget simply selects the current tiddler and checks whether or not it has the {{person||showtag}} tag. If so, a table with the details is displayed.

Next we need an edit template. This template is also quite simple. It's called [[editPerson]] and has no special features at all:

{{editPerson||code}}

I also created a template for displaying a person's entry with a button which allows inline editing of it:

{{personEntry||code}}

In order to be able to create or edit an entry, we need a place to store the entries title (i.e. the person's name). I choose the temp tiddler "[[$:/temp/PersonDBeditPerson]]".

The macro (''editbutton'') defines a button which, when clicked, simply stores the current tiddler's title in my temp tiddler.

The ''editfield'' macro contains a reveal widget. It compares the current tiddler's name to the content of the temp tiddler. If they match, we get the current tiddler transcluded, using the editPerson template.

Next in the ''editfield'' 2 buttons are defined. One for closing the editor, the other for deleting the tiddler. The editor is simply closed by setting the temp tiddler to the empty string. The entry is deleted by sending a delete message.

As the final part of the [[personEntry]] template we display the title as a link, followed by the edit button and the editfields.

Finally we need the contacts list:

{{Person DB||code}}

At the top of the list, we have an input field for a new contact's name. It is simply a field allowing to edit the temp tiddler's text. Behind that we have a button which is creating the new entry, using the newtiddler macro. The surrunding set widget sets the value of the tags of the newly created tiddler. The title is taken from the temp tiddler's text. Setting the edit attribute to "no" means that the newly created tiddler is not displayd as a tiddler. It's simply created.

At last the list is defined which retrieves all tiddlers tagged with {{person||showtag}} and transcluding them using the [[personEntry]] template.

See [[Person DB]] in action.

See also [[Persons by town]]â€¦